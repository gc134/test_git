# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\gwcueff\Documents\Bioinfo\outils_perso\python_germination\PyG_interface_2\interface_v2_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (QApplication, QWidget, QFileDialog, QTextEdit, QPushButton, QLabel, QVBoxLayout,QTableView, QHBoxLayout, QLineEdit)
from PyQt5.QtCore import QDir, Qt, QAbstractTableModel
import pandas as pd
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from pyqtgraph import PlotWidget

import numpy as np

import matplotlib.pyplot as plt

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


import matplotlib
import scipy

from scipy.optimize import curve_fit

from scipy.interpolate import interp1d

import warnings

from scipy.integrate import quad

import pingouin as pg

import seaborn as sns




# classe DataFrameModel pour formattage des jd pour affichage dans un objet TableView

class DataFrameModel(QtCore.QAbstractTableModel):
    DtypeRole = QtCore.Qt.UserRole + 1000
    ValueRole = QtCore.Qt.UserRole + 1001

    def __init__(self, df=pd.DataFrame(), parent=None):
        super(DataFrameModel, self).__init__(parent)
        self._dataframe = df

    def setDataFrame(self, dataframe):
        self.beginResetModel()
        self._dataframe = dataframe.copy()
        self.endResetModel()

    def dataFrame(self):
        return self._dataframe

    dataFrame = QtCore.pyqtProperty(pd.DataFrame, fget=dataFrame, fset=setDataFrame)

    @QtCore.pyqtSlot(int, QtCore.Qt.Orientation, result=str)
    def headerData(self, section: int, orientation: QtCore.Qt.Orientation, role: int = QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole:
            if orientation == QtCore.Qt.Horizontal:
                return self._dataframe.columns[section]
            else:
                return str(self._dataframe.index[section])
        return QtCore.QVariant()

    def rowCount(self, parent=QtCore.QModelIndex()):
        if parent.isValid():
            return 0
        return len(self._dataframe.index)

    def columnCount(self, parent=QtCore.QModelIndex()):
        if parent.isValid():
            return 0
        return self._dataframe.columns.size

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if not index.isValid() or not (0 <= index.row() < self.rowCount() \
                                       and 0 <= index.column() < self.columnCount()):
            return QtCore.QVariant()
        row = self._dataframe.index[index.row()]
        col = self._dataframe.columns[index.column()]
        dt = self._dataframe[col].dtype

        val = self._dataframe.iloc[row][col]
        if role == QtCore.Qt.DisplayRole:
            return str(val)
        elif role == DataFrameModel.ValueRole:
            return val
        if role == DataFrameModel.DtypeRole:
            return dt
        return QtCore.QVariant()

    def roleNames(self):
        roles = {
            QtCore.Qt.DisplayRole: b'display',
            DataFrameModel.DtypeRole: b'dtype',
            DataFrameModel.ValueRole: b'value'
        }
        return roles

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
            super(TableModel, self).__init__()
            self._data = data

    def data(self, index, role):
            if role == Qt.DisplayRole:
                # See below for the nested-list data structure.
                # .row() indexes into the outer list,
                # .column() indexes into the sub-list
                return self._data[index.row()][index.column()]

    def rowCount(self, index):
            # The length of the outer list.
            return len(self._data)

    def columnCount(self, index):
            # The following takes the first sub-list, and returns
            # the length (only works if all rows are an equal length)
            return len(self._data[0])

# classe principale Ui_MainWindow

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1246, 1034)
        font = QtGui.QFont()
        font.setPointSize(14)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(209, 9, 1021, 951))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()

        # page1

        self.page.setObjectName("page")
        self.titre_page1 = QtWidgets.QLabel(self.page)
        self.titre_page1.setGeometry(QtCore.QRect(350, 10, 300, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page1.setFont(font)
        self.titre_page1.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page1.setAutoFillBackground(True)
        self.titre_page1.setScaledContents(False)
        self.titre_page1.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page1.setWordWrap(False)
        self.titre_page1.setObjectName("titre_page1")
        self.import_page1 = QtWidgets.QPushButton(self.page)
        self.import_page1.setGeometry(QtCore.QRect(450, 120, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.import_page1.setFont(font)
        self.import_page1.setObjectName("import_page1")
        self.label_page1 = QtWidgets.QLabel(self.page)
        self.label_page1.setGeometry(QtCore.QRect(10, 210, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_page1.setFont(font)
        self.label_page1.setObjectName("label_page1")
        self.tableView_page1 = QtWidgets.QTableView(self.page)
        self.tableView_page1.setGeometry(QtCore.QRect(10, 250, 1001, 461))
        self.tableView_page1.setObjectName("tableView_page1")
        self.textBrowser_page1 = QtWidgets.QTextBrowser(self.page)
        self.textBrowser_page1.setGeometry(QtCore.QRect(310, 750, 390, 192))
        self.textBrowser_page1.setObjectName("textBrowser_page1")
        self.stackedWidget.addWidget(self.page)

        #page2
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.titre_page2 = QtWidgets.QLabel(self.page_2)
        self.titre_page2.setGeometry(QtCore.QRect(370, 10, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page2.setFont(font)
        self.titre_page2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page2.setAutoFillBackground(True)
        self.titre_page2.setScaledContents(False)
        self.titre_page2.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page2.setWordWrap(False)
        self.titre_page2.setObjectName("titre_page2")
        self.tableView_page2 = QtWidgets.QTableView(self.page_2)
        self.tableView_page2.setGeometry(QtCore.QRect(0, 250, 1001, 461))
        self.tableView_page2.setObjectName("tableView_page2")
        self.calcul_page2 = QtWidgets.QPushButton(self.page_2)
        self.calcul_page2.setGeometry(QtCore.QRect(450, 160, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.calcul_page2.setFont(font)
        self.calcul_page2.setObjectName("calcul_page2")
        self.export_page2 = QtWidgets.QPushButton(self.page_2)
        self.export_page2.setGeometry(QtCore.QRect(450, 760, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.export_page2.setFont(font)
        self.export_page2.setObjectName("export_page2")
        self.stackedWidget.addWidget(self.page_2)

        # page3
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.courbe_ind_page3 = QtWidgets.QPushButton(self.page_3)
        self.courbe_ind_page3.setGeometry(QtCore.QRect(160, 210, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.courbe_ind_page3.setFont(font)
        self.courbe_ind_page3.setObjectName("courbe_ind_page3")
        self.titre_page3 = QtWidgets.QLabel(self.page_3)
        self.titre_page3.setGeometry(QtCore.QRect(380, 10, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page3.setFont(font)
        self.titre_page3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page3.setAutoFillBackground(True)
        self.titre_page3.setScaledContents(False)
        self.titre_page3.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page3.setWordWrap(False)
        self.titre_page3.setObjectName("titre_page3")
        self.courbe_groupe_page3 = QtWidgets.QPushButton(self.page_3)
        self.courbe_groupe_page3.setGeometry(QtCore.QRect(680, 210, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.courbe_groupe_page3.setFont(font)
        self.courbe_groupe_page3.setObjectName("courbe_groupe_page3")
        self.textEdit1_page3 = QtWidgets.QTextEdit(self.page_3)
        self.textEdit1_page3.setGeometry(QtCore.QRect(160, 170, 191, 35))
        self.textEdit1_page3.setObjectName("textEdit1_page3")
        self.textEdit2_page3 = QtWidgets.QTextEdit(self.page_3)
        self.textEdit2_page3.setGeometry(QtCore.QRect(680, 170, 191, 35))
        self.textEdit2_page3.setObjectName("textEdit2_page3")
        self.label1_page3 = QtWidgets.QLabel(self.page_3)
        self.label1_page3.setEnabled(True)
        self.label1_page3.setGeometry(QtCore.QRect(25, 350, 450, 500))
        self.label1_page3.setStyleSheet("border: 1px solid lightgrey;")
        self.label1_page3.setObjectName("label1_page3")
        self.label2_page3 = QtWidgets.QLabel(self.page_3)
        self.label2_page3.setEnabled(True)
        self.label2_page3.setGeometry(QtCore.QRect(545, 350, 450, 500))
        self.label2_page3.setStyleSheet("border: 1px solid lightgrey;")
        self.label2_page3.setObjectName("label2_page3")
        self.stackedWidget.addWidget(self.page_3)

        # page4
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.titre_page4 = QtWidgets.QLabel(self.page_4)
        self.titre_page4.setGeometry (QtCore.QRect(290, 0, 420, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page4.setFont(font)
        self.titre_page4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page4.setAutoFillBackground(True)
        self.titre_page4.setScaledContents(False)
        self.titre_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page4.setWordWrap(False)
        self.titre_page4.setObjectName("titre_page4")
        self.textBrowser_page4 = QtWidgets.QTextBrowser(self.page_4)
        self.textBrowser_page4.setGeometry(QtCore.QRect(50, 75, 450, 182))
        self.textBrowser_page4.setObjectName("textBrowser_page4")
        self.textBrowser_page4.setFont(QtGui.QFont("arial", 12))
        self.textBrowser_page4.setText("Gmax : pourcentage final de germination\n\nT1 : délai pour 1% de germination\n\nT50 : délai pour 50% de germination\n\nU25-75 : uniformité\n\nAUC : aire sous courbe")
        # self.textBrowser_page4.setAlignment(QtCore.Qt.AlignCenter)


        self.label_page4 = QtWidgets.QLabel(self.page_4)
        self.label_page4.setEnabled(True)
        self.label_page4.setGeometry(QtCore.QRect(550, 50, 407, 230))
        #self.label_page4.setStyleSheet("border: 1px solid lightgrey;")
        self.label_page4.setObjectName("label_page4")

        # bloc permettant d'afficher une image de manière permanente dans le Qlabel
        self.image_germinator = QPixmap("germinator.tif")
        self.image_germinator_2 = self.image_germinator.scaled(407, 230, Qt.KeepAspectRatio, transformMode=QtCore.Qt.SmoothTransformation)
        self.label_page4.setPixmap(self.image_germinator_2)


        self.label1_page4 = QtWidgets.QLabel(self.page_4)
        self.label1_page4.setGeometry(QtCore.QRect(120, 290, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label1_page4.setFont(font)
        self.label1_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.label1_page4.setObjectName("label1_page4")
        self.label2_page4 = QtWidgets.QLabel(self.page_4)
        self.label2_page4.setGeometry(QtCore.QRect(300, 290, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label2_page4.setFont(font)
        self.label2_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.label2_page4.setObjectName("label2_page4")
        self.label3_page4 = QtWidgets.QLabel(self.page_4)
        self.label3_page4.setGeometry(QtCore.QRect(480, 290, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label3_page4.setFont(font)
        self.label3_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.label3_page4.setObjectName("label3_page4")
        self.label4_page4 = QtWidgets.QLabel(self.page_4)
        self.label4_page4.setGeometry(QtCore.QRect(660, 290, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label4_page4.setFont(font)
        self.label4_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.label4_page4.setObjectName("label4_page4")
        self.label5_page4 = QtWidgets.QLabel(self.page_4)
        self.label5_page4.setGeometry(QtCore.QRect(770, 290, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label5_page4.setFont(font)
        self.label5_page4.setAlignment(QtCore.Qt.AlignCenter)
        self.label5_page4.setObjectName("label5_page4")

        # nx QLabel pour affichage des courbes individuelles ajustées

        self.label6_page4 = QtWidgets.QLabel(self.page_4)
        self.label6_page4.setEnabled(True)
        self.label6_page4.setGeometry(QtCore.QRect(50, 420, 451, 391))
        self.label6_page4.setStyleSheet("border: 1px solid lightgrey;")
        self.label6_page4.setObjectName("label_page4")

        self.tableView_page4 = QtWidgets.QTableView(self.page_4)
        self.tableView_page4.setGeometry(QtCore.QRect(510, 420, 441, 391))
        self.tableView_page4.setObjectName("tableView_page4")
        self.courbe_page4 = QtWidgets.QPushButton(self.page_4)
        self.courbe_page4.setGeometry(QtCore.QRect(190, 820, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.courbe_page4.setFont(font)
        self.courbe_page4.setObjectName("courbe_page4")
        self.param_ind_page4 = QtWidgets.QPushButton(self.page_4)
        self.param_ind_page4.setGeometry(QtCore.QRect(520, 820, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.param_ind_page4.setFont(font)
        self.param_ind_page4.setObjectName("param_ind_page4")
        self.param_groupe_page4 = QtWidgets.QPushButton(self.page_4)
        self.param_groupe_page4.setGeometry(QtCore.QRect(740, 820, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.param_groupe_page4.setFont(font)
        self.param_groupe_page4.setObjectName("param_groupe_page4")
        self.export_page4 = QtWidgets.QPushButton(self.page_4)
        self.export_page4.setGeometry(QtCore.QRect(400, 920, 200, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.export_page4.setFont(font)
        self.export_page4.setObjectName("export_page4")
        self.calcul_page4 = QtWidgets.QPushButton(self.page_4)
        self.calcul_page4.setGeometry(QtCore.QRect(400, 360, 200, 50))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.calcul_page4.setFont(font)
        self.calcul_page4.setObjectName("calcul_page4")

        # ici se créée le widget de base qui abrite la QHBoxLayout avec les 5 textEdit
        # pour saisie des valeurs initiales d'ajustement
        # c'est ce widget qu'on doit redimensionner pour redimensionner la QHBoxLayout

        self.widget = QtWidgets.QWidget(self.page_4)
        self.widget.setGeometry(QtCore.QRect(50, 320, 901, 30)) # modification de position et de taille ici !!!
        self.widget.setObjectName("widget")

        self.horizontalLayout_page4 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_page4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_page4.setObjectName("horizontalLayout_page4")

        self.textEdit1_page4 = QtWidgets.QTextEdit(self.widget)
        self.textEdit1_page4.setObjectName("textEdit1_page4")
        self.textEdit1_page4.setText("70")
        self.horizontalLayout_page4.addWidget(self.textEdit1_page4)

        self.textEdit2_page4 = QtWidgets.QTextEdit(self.widget)
        self.textEdit2_page4.setObjectName("textEdit2_page4")
        self.textEdit2_page4.setText("2")
        self.horizontalLayout_page4.addWidget(self.textEdit2_page4)


        self.textEdit3_page4 = QtWidgets.QTextEdit(self.widget)
        self.textEdit3_page4.setObjectName("textEdit3_page4")
        self.textEdit3_page4.setText("30")
        self.horizontalLayout_page4.addWidget(self.textEdit3_page4)


        self.textEdit4_page4 = QtWidgets.QTextEdit(self.widget)
        self.textEdit4_page4.setObjectName("textEdit4_page4")
        self.textEdit4_page4.setText("0")
        self.horizontalLayout_page4.addWidget(self.textEdit4_page4)


        self.textEdit5_page4 = QtWidgets.QTextEdit(self.widget)
        self.textEdit5_page4.setObjectName("textEdit5_page4")
        self.textEdit5_page4.setText("54")
        self.horizontalLayout_page4.addWidget(self.textEdit5_page4)


        self.stackedWidget.addWidget(self.page_4)

        # page5
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")

        self.titre_page5 = QtWidgets.QLabel(self.page_5)
        self.titre_page5.setGeometry(QtCore.QRect(360, 0, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page5.setFont(font)
        self.titre_page5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page5.setAutoFillBackground(True)
        self.titre_page5.setScaledContents(False)
        self.titre_page5.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page5.setWordWrap(False)
        self.titre_page5.setObjectName("titre_page5")

        self.comboBox_page5 = QtWidgets.QComboBox(self.page_5)
        self.comboBox_page5.setGeometry(QtCore.QRect(400, 110, 210, 41))
        self.comboBox_page5.setEditable(False)
        self.comboBox_page5.addItems('choix d\'un paramètre,Gmax,t50,AUC'.split(','))
        self.comboBox_page5.setCurrentText("choix d\'un paramètre")
        self.comboBox_page5.setObjectName("comboBox_page5")





        self.pushButton_page5 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_page5.setGeometry(QtCore.QRect(440, 260, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_page5.setFont(font)
        self.pushButton_page5.setObjectName("pushButton_page5")

        self.textEdit_page5 = QtWidgets.QTextEdit(self.page_5)
        self.textEdit_page5.setGeometry(QtCore.QRect(370, 210, 271, 31))
        self.textEdit_page5.setObjectName("textEdit_page5")

        self.label_page5 = QtWidgets.QLabel(self.page_5)
        self.label_page5.setEnabled(True)
        self.label_page5.setGeometry(QtCore.QRect(270, 350, 471, 431))
        self.label_page5.setStyleSheet("border: 1px solid lightgrey;")
        self.label_page5.setObjectName("label_page4")

        self.stackedWidget.addWidget(self.page_5)

        #page6

        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")

        self.titre_page6 = QtWidgets.QLabel(self.page_6)
        self.titre_page6.setGeometry(QtCore.QRect(390, 10, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page6.setFont(font)
        self.titre_page6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page6.setAutoFillBackground(True)
        self.titre_page6.setScaledContents(False)
        self.titre_page6.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page6.setWordWrap(False)
        self.titre_page6.setObjectName("titre_page6")


        self.comboBox_page6 = QtWidgets.QComboBox(self.page_6)
        self.comboBox_page6.setGeometry(QtCore.QRect(440, 130, 181, 41))
        self.comboBox_page6.setEditable(False)
        self.comboBox_page6.setCurrentText("Choix d\'un paramètre")
        self.comboBox_page6.addItems('Choix d\'un paramètre,Gmax,t50,AUC'.split(','))
        self.comboBox_page6.setObjectName("comboBox_page6")

        self.tableView_page6 = QtWidgets.QTableView(self.page_6)
        self.tableView_page6.setGeometry(QtCore.QRect(240, 270, 591, 381))
        self.tableView_page6.setObjectName("tableView_page6")
        self.export_page6 = QtWidgets.QPushButton(self.page_6)
        self.export_page6.setGeometry(QtCore.QRect(490, 680, 91, 31))
        self.export_page6.setObjectName("export_page6")
        self.widget1 = QtWidgets.QWidget(self.page_6)
        self.widget1.setGeometry(QtCore.QRect(300, 210, 481, 33))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.anova_page6 = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.anova_page6.setFont(font)
        self.anova_page6.setObjectName("anova_page6")
        self.horizontalLayout.addWidget(self.anova_page6)
        self.multcomp_page6 = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.multcomp_page6.setFont(font)
        self.multcomp_page6.setObjectName("multcomp_page6")
        self.horizontalLayout.addWidget(self.multcomp_page6)
        self.cld_page6 = QtWidgets.QPushButton(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cld_page6.setFont(font)
        self.cld_page6.setObjectName("cld_page6")
        self.horizontalLayout.addWidget(self.cld_page6)
        self.stackedWidget.addWidget(self.page_6)

        #page7
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.boxplot_page7 = QtWidgets.QPushButton(self.page_7)
        self.boxplot_page7.setGeometry(QtCore.QRect(450, 260, 151, 51))
        self.boxplot_page7.setObjectName("boxplot_page7")
        self.comboBox_page7 = QtWidgets.QComboBox(self.page_7)
        self.comboBox_page7.setGeometry(QtCore.QRect(430, 120, 181, 41))
        self.comboBox_page7.setEditable(False)
        self.comboBox_page7.setCurrentText("")
        self.comboBox_page7.setObjectName("comboBox_page7")
        self.titre_page7 = QtWidgets.QLabel(self.page_7)
        self.titre_page7.setGeometry(QtCore.QRect(380, 10, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page7.setFont(font)
        self.titre_page7.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page7.setAutoFillBackground(True)
        self.titre_page7.setScaledContents(False)
        self.titre_page7.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page7.setWordWrap(False)
        self.titre_page7.setObjectName("titre_page7")
        self.textEdit_page7 = QtWidgets.QTextEdit(self.page_7)
        self.textEdit_page7.setGeometry(QtCore.QRect(430, 220, 191, 21))
        self.textEdit_page7.setObjectName("textEdit_page7")
        self.graphicsView_page7 = QtWidgets.QGraphicsView(self.page_7)
        self.graphicsView_page7.setGeometry(QtCore.QRect(290, 340, 471, 431))
        self.graphicsView_page7.setObjectName("graphicsView_page7")
        self.stackedWidget.addWidget(self.page_7)

        #page8 : rapport
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.titre_page8 = QtWidgets.QLabel(self.page_8)
        self.titre_page8.setGeometry(QtCore.QRect(380, 10, 281, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.titre_page8.setFont(font)
        self.titre_page8.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.titre_page8.setAutoFillBackground(True)
        self.titre_page8.setScaledContents(False)
        self.titre_page8.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_page8.setWordWrap(False)
        self.titre_page8.setObjectName("titre_page8")
        self.stackedWidget.addWidget(self.page_8)

        # verticalLayout : boutons de navigation sur la gauche de l'interface

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 181, 951))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_1 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setObjectName("pushButton_1")
        self.verticalLayout.addWidget(self.pushButton_1)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.pushButton_6)
        self.pushButton_7 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout.addWidget(self.pushButton_8)

        # menu + barre d'état
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1246, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        ############## C'est ici qu'on peut définir la page du QStackedWidget par défaut ############################

        self.stackedWidget.setCurrentIndex(0)


        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # définition de variables pour la classe principale



    # liste des objets titrés dans l'application et méthode setText pour changer étiquettes des ces objets

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PyG v0"))

        # objets graphiques de la zone QStackedWidget

        self.titre_page1.setText(_translate("MainWindow", "Chargement des données"))
        self.import_page1.setText(_translate("MainWindow", "import"))
        self.label_page1.setText(_translate("MainWindow", ""))
        self.titre_page2.setText(_translate("MainWindow", "Calcul des pourcentages"))
        self.calcul_page2.setText(_translate("MainWindow", "calcul"))
        self.export_page2.setText(_translate("MainWindow", "export"))
        self.courbe_ind_page3.setText(_translate("MainWindow", "courbes individuelles"))
        self.titre_page3.setText(_translate("MainWindow", "Courbes de germination"))
        self.courbe_groupe_page3.setText(_translate("MainWindow", "courbes groupées"))
        self.label1_page3.setText(_translate("MainWindow", ""))
        self.label2_page3.setText(_translate("MainWindow", ""))
        self.titre_page4.setText(_translate("MainWindow", "Calcul des paramètres de germination"))
        self.label_page4.setText(_translate("MainWindow", ""))
        self.label1_page4.setText(_translate("MainWindow", "a"))
        self.label2_page4.setText(_translate("MainWindow", "b"))
        self.label3_page4.setText(_translate("MainWindow", "c"))
        self.label4_page4.setText(_translate("MainWindow", "yo"))
        self.label5_page4.setText(_translate("MainWindow", "intervalle"))
        self.courbe_page4.setText(_translate("MainWindow", "courbes d\'ajustement"))
        self.param_ind_page4.setText(_translate("MainWindow", "paramètres\n"
                                                              "individuels"))
        self.param_groupe_page4.setText(_translate("MainWindow", "paramètres\n"
                                                                 "groupés"))
        self.export_page4.setText(_translate("MainWindow", "export"))
        self.calcul_page4.setText(_translate("MainWindow", "calcul"))
        self.titre_page5.setText(_translate("MainWindow", "Boxplots"))
        self.pushButton_page5.setText(_translate("MainWindow", "boxplots"))
        self.titre_page6.setText(_translate("MainWindow", "Statistiques"))
        self.export_page6.setText(_translate("MainWindow", "export"))
        self.anova_page6.setText(_translate("MainWindow", "anova"))
        self.multcomp_page6.setText(_translate("MainWindow", "comparaisons multiples"))
        self.cld_page6.setText(_translate("MainWindow", "cld"))
        self.boxplot_page7.setText(_translate("MainWindow", "boxplots Tukey"))
        self.titre_page7.setText(_translate("MainWindow", "Boxplots de Tukey"))
        self.titre_page8.setText(_translate("MainWindow", "Rapport"))

        # VBoxLayout latérale et ses 8 boutons

        self.pushButton_1.setText(_translate("MainWindow", "Chargement des\n"
                                                           "données"))
        self.pushButton_2.setText(_translate("MainWindow", "Calcul des\n"
                                                           "pourcentages"))
        self.pushButton_3.setText(_translate("MainWindow", "Courbes de\n"
                                                           "germination"))
        self.pushButton_4.setText(_translate("MainWindow", "Calcul des paramètres\n"
                                                           "de germination"))
        self.pushButton_5.setText(_translate("MainWindow", "Boxplots"))
        self.pushButton_6.setText(_translate("MainWindow", "Statistiques"))
        self.pushButton_7.setText(_translate("MainWindow", "Boxplots de Tukey"))
        self.pushButton_8.setText(_translate("MainWindow", "Rapport"))

        # signaux pour les objets

        # 8 boutons latéraux = navigation entre les pages

        self.pushButton_1.clicked.connect(self.change_window_1)
        self.pushButton_2.clicked.connect(self.change_window_2)
        self.pushButton_3.clicked.connect(self.change_window_3)
        self.pushButton_4.clicked.connect(self.change_window_4)
        self.pushButton_5.clicked.connect(self.change_window_5)
        self.pushButton_6.clicked.connect(self.change_window_6)
        self.pushButton_7.clicked.connect(self.change_window_7)
        self.pushButton_8.clicked.connect(self.change_window_8)

        # signal clic sur import_page1 : import données brutes

        self.import_page1.clicked.connect(self.import_data)

        # signal clic sur calcul_page2 : lancer calcul des pourcentages de graines germées

        self.calcul_page2.clicked.connect(self.pourcentage)

        # signal clic sur export_page2 : pour exporter pourcentages de germination

        self.export_page2.clicked.connect(self.export_tableau)

        # signal clic sur courbe_ind_page3 : générer le graphe matplotlib détaché des courbes de germinations individuelles

        self.courbe_ind_page3.clicked.connect(self.courbe_ind)

        #signal clic sur courbe_groupe_page3 : générer le graphe matplotlib détaché des courbes de germination par groupe

        self.courbe_groupe_page3.clicked.connect(self.courbe_groupe)

        # signal clic sur page4 pour bouton calcul_page4 : pour lancer l'ajustement (fitting) des données expérimentales

        self.calcul_page4.clicked.connect(self.ajustement)

        # signal clic sur page4 pour bouton courbes d'ajustement : pour affichage dans une fenêtre matplotlib des courbes d'ajustement individuelles

        self.courbe_page4.clicked.connect(self.graphe_ajustement)

        # signal clic sur page4 pour bouton paramètres de germination individuels : génère et affiche les paramètres de germination pour tous les ech°

        self.param_ind_page4.clicked.connect(self.parametre_germination_ind)

        # signal clic sur page4 pour bouton paramètres de germination par groupe : génère et affiche les paramètres de germination moyennés

        self.param_groupe_page4.clicked.connect(self.parametre_germination_groupe)

        # signal clic sur page4 pour bouton export : export dans rep de travail directement des tableaux de paramètres de germination individuels ou groupés

        self.export_page4.clicked.connect(self.export_param_germination)

        # signal clic sur page5 pour bouton boxplot : ouverture d'une fenêtre matplotlib et affichage du boxplot dans le QLabel

        self.pushButton_page5.clicked.connect(self.boxplot_germination)

        # signal et slots (méthodes associées) sur page6 pour bouton anova : réalisation de l'anova pour le paramètre de
        # germinattionet sélectionné et affichage dans la zone TableView de la page 6

        self.anova_page6.clicked.connect(self.anova)

        # signal sur page6 pour bouton multcomp : tests posthoc

        self.multcomp_page6.clicked.connect(self.multcomp)

        # signal sur page6 pour bouton cld : récupération des cld de comparaisons multiples

        # self.cld_page6.clicked.connect(self.cld)

        # signal sur page6 pour bouton export : export au format .csv des données affichées dans la tableView

        self.export_page6.clicked.connect(self.export_tableau_stat)


    # méthodes nécessaires à l'application

    # méthodes de changement de pages sur clic boutons latéraux de la VBoxLayout

    def change_window_1(self):
        self.stackedWidget.setCurrentIndex(0)

    def change_window_2(self):
        self.stackedWidget.setCurrentIndex(1)

    def change_window_3(self):
        self.stackedWidget.setCurrentIndex(2)

    def change_window_4(self):
        self.stackedWidget.setCurrentIndex(3)

    def change_window_5(self):
        self.stackedWidget.setCurrentIndex(4)

    def change_window_6(self):
        self.stackedWidget.setCurrentIndex(5)

    def change_window_7(self):
        self.stackedWidget.setCurrentIndex(6)

    def change_window_8(self):
        self.stackedWidget.setCurrentIndex(7)


    # méthode import bouton import_page1

    def update(self):
        self.label_page1.adjustSize()

    def import_data(self):
        '''
        méthode pour importer des données brutes de germination
        et pour leur affichage dans un objet tableView
        :return: self.data
        '''

        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
            self.file_name = dialog.selectedFiles()[0]

        self.label_page1.setText(self.file_name)
        self.update()

        self.data = pd.read_csv(self.file_name, sep=";")
        model_brut = DataFrameModel(self.data)
        self.tableView_page1.setModel(model_brut)
        self.tableView_page1.resizeColumnsToContents()

    # méthode de calcul des pourcentages

    def pourcentage(self):

        self.data2 = self.data.drop(['echantillon', 'groupe', 'total'], 1)

        self.total= self.data['total']

        self.data3 = pd.DataFrame()

        for i in range(0, self.data2.shape[0]):
            vec = self.data2.iloc[i, :]
            vec2 = round((vec / self.total[i]) * 100, 1)
            vec2 = pd.DataFrame(vec2).transpose()
            self.data3 = pd.concat([self.data3, vec2])

        self.data4 = pd.concat([self.data[["echantillon","groupe"]],self.data3], axis=1)

        model_pourcentage = DataFrameModel(self.data4)
        self.tableView_page2.setModel(model_pourcentage)
        self.tableView_page2.resizeColumnsToContents()

        #création très artificielle de la série temporelle : trouver une solution pourt l'extraire auto des donnés brutes
        self.ts=[0,8,24,26,28,30,32,34,50,54]

    # méthode d'export d'un tableau affiché dans une TableView

    def export_tableau(self):

        self.data4.to_csv("tableau_pourcentages.csv", sep=";", decimal=".", index=False)

    # méthode de génération des courbes de germination individuelles

    def courbe_ind(self):

        self.titre1_page3 = self.textEdit1_page3.toPlainText()

        curves=[]

        for i in range(0, self.data3.transpose().shape[1]):
            x = np.array(self.ts)
            y = self.data3.transpose().iloc[:, i]
            curves += plt.plot(x, y)


        # plt.pause(0.001)
        plt.title(self.titre1_page3)
        plt.xlabel("temps (heures)")
        plt.ylabel("% germination")
        plt.legend(curves, self.data4['echantillon'], loc=0)
        plt.savefig("courbes_ind.tiff")

        plt.show()
        plt.figure()




        self.image_courbe_ind = QPixmap("courbes_ind.tiff")
        self.image_courbe_ind_2 = self.image_courbe_ind.scaled(450, 500, Qt.KeepAspectRatio, transformMode=QtCore.Qt.SmoothTransformation)
        self.label1_page3.setPixmap(self.image_courbe_ind_2)




    # méthode de génération de courbes de germination groupées

    def courbe_groupe(self):

        self.titre2_page3 = self.textEdit2_page3.toPlainText()

        self.data4_mean = pd.DataFrame()

        for name in self.data4.columns[2:]:
            vec = self.data4.groupby('groupe')[name].mean().values
            vec = pd.DataFrame(vec)
            self.data4_mean = pd.concat([self.data4_mean, vec], axis=1, ignore_index=True)

        self.data4_sd = pd.DataFrame()

        for name in self.data4.columns[2:]:
            vec = self.data4.groupby('groupe')[name].std().values
            vec = pd.DataFrame(vec)
            self.data4_sd = pd.concat([self.data4_sd, vec], axis=1, ignore_index=True)

        curves=[]

        for i in range(0, self.data4_mean.shape[0]):
            texte_legend_groupe=self.data4['groupe'].unique().tolist()[i]
            curves += plt.errorbar(np.array(self.ts), self.data4_mean.iloc[i, :], self.data4_sd.iloc[i, :], linestyle='solid',
                                   marker='.', label="{}".format(texte_legend_groupe))
        # plt.pause(0.001)
        plt.title(self.titre2_page3)
        plt.xlabel("temps (heures)")
        plt.ylabel("% germination")
        plt.legend(loc=0)
        plt.savefig("courbes_groupe.tiff")


        plt.show()



        self.image_courbe_groupe = QPixmap("courbes_groupe.tiff")
        self.image_courbe_groupe_2 = self.image_courbe_groupe.scaled(450, 500, Qt.KeepAspectRatio, transformMode=QtCore.Qt.SmoothTransformation)
        self.label2_page3.setPixmap(self.image_courbe_groupe_2)



    # méthode d'ajustement

    def ajustement(self):

        def hill_function(x, a, b, c, yo):
            return yo + (a * np.power(x, b) / (np.power(c, b) + np.power(x, b)))

        self.data5 = pd.DataFrame()

        self.xData = self.ts

        self.xmax = float(self.textEdit5_page4.toPlainText())

        self.x_new = np.linspace(0, self.xmax, 100)

        self.initialParameters = np.array([float(self.textEdit1_page4.toPlainText()),float(self.textEdit2_page4.toPlainText()), float(self.textEdit3_page4.toPlainText()), float(self.textEdit4_page4.toPlainText())])


        # plutôt que d'afficher simplement les données y d'ajustement pour les points de temps d'observation avec des cassures
        # on préfère représenter des courbes lissées = par interpolation

        curves = []

        for i in range(0, self.data3.shape[0]):

            yData = np.array(self.data3.iloc[i, :])

            self.fittedParameters, self.pcov = curve_fit(hill_function, self.xData, yData, self.initialParameters)

            f_new = interp1d(self.xData, hill_function(self.xData, *self.fittedParameters),kind="slinear")

            y_new= f_new(self.x_new)

            curves += plt.plot(self.x_new, y_new)


        plt.title("ajustements")
        plt.xlabel("temps (heures)")
        plt.ylabel("% germination")
        plt.legend(curves, self.data4['echantillon'], loc=0)
        plt.savefig("courbes_ajustement.tiff")

        self.image_courbe_ajustement = QPixmap("courbes_ajustement.tiff")
        self.image_courbe_ajustement_2 = self.image_courbe_ajustement.scaled(451, 391, Qt.KeepAspectRatio,
                                                                             transformMode=QtCore.Qt.SmoothTransformation)
        self.label6_page4.setPixmap(self.image_courbe_ajustement_2)


    def graphe_ajustement(self):

        def hill_function(x, a, b, c, yo):
            return yo + (a * np.power(x, b) / (np.power(c, b) + np.power(x, b)))

        self.data5 = pd.DataFrame()

        self.xData = self.ts

        self.xmax = float(self.textEdit5_page4.toPlainText())

        self.x_new = np.linspace(0, self.xmax, 100)

        self.initialParameters = np.array(
            [float(self.textEdit1_page4.toPlainText()), float(self.textEdit2_page4.toPlainText()),
             float(self.textEdit3_page4.toPlainText()), float(self.textEdit4_page4.toPlainText())])

        # plutôt que d'afficher simplement les données y d'ajustement pour les points de temps d'observation avec des cassures
        # on préfère représenter des courbes lissées = par interpolation

        curves = []

        for i in range(0, self.data3.shape[0]):
            yData = np.array(self.data3.iloc[i, :])

            self.fittedParameters, self.pcov = curve_fit(hill_function, self.xData, yData, self.initialParameters)

            f_new = interp1d(self.xData, hill_function(self.xData, *self.fittedParameters), kind="slinear")

            y_new = f_new(self.x_new)

            curves += plt.plot(self.x_new, y_new)

        plt.title("ajustements")
        plt.xlabel("temps (heures)")
        plt.ylabel("% germination")
        plt.legend(curves, self.data4['echantillon'], loc=0)
        plt.show()
        plt.figure()



    # méthode de calcul des paramètres de germination après ajustement

    def parametre_germination_ind(self):

        def hill_function(x, a, b, c, yo):
            return yo + (a * np.power(x, b) / (np.power(c, b) + np.power(x, b)))

        def optimized_hill_function(x):
            return self.fittedParameters[3] + (self.fittedParameters[0] * np.power(x, self.fittedParameters[1]) / (
                    np.power(self.fittedParameters[2], self.fittedParameters[1]) + np.power(x, self.fittedParameters[1])))

        self.data6 = pd.DataFrame()

        for i in range(0, self.data3.shape[0]):

            yData = np.array(self.data3.iloc[i, :])

            self.fittedParameters, self.pcov = curve_fit(hill_function, self.xData, yData, self.initialParameters)

            self.xmin = 0

            self.xmax = float(self.textEdit5_page4.toPlainText())

            self.res_integrale, self.err_integrale = quad(optimized_hill_function, self.xmin, self.xmax)

            self.Gmax, self.t50, self.AUC = round(self.fittedParameters[0], 2), round(self.fittedParameters[2], 2), round(
                self.res_integrale, 2)

            self.valeurs_parametres = [self.Gmax, self.t50, self.AUC]

            self.valeurs_parametres = pd.DataFrame(self.valeurs_parametres).transpose()

            self.data6 = self.data6.append(self.valeurs_parametres, ignore_index=True)

        self.data6.columns = ['Gmax', 't50', 'AUC']

        # pour insérer une nelle colonne dans le tableau en définissant sa position (ici en 1ere place)
        # et son intitulé : méthode insert() sur des pandas dataframe : très intéressant !!!

        self.data6.insert(0, 'echantillon', self.data['echantillon'])

        self.model_germination_ind = DataFrameModel(self.data6)
        self.tableView_page4.setModel(self.model_germination_ind)
        self.tableView_page4.resizeColumnsToContents()

    # méthode de calcul des paramètres de germination par groupe

    def parametre_germination_groupe(self):

        self.data6.insert(1, 'groupe', self.data['groupe'])

        self.data6_mean=pd.DataFrame()

        for name in self.data6.columns[2:]:
            vec = self.data6.groupby('groupe')[name].mean().values
            vec = (round(num,2) for num in vec)
            vec = pd.DataFrame(vec)
            self.data6_mean = pd.concat([self.data6_mean, vec], axis=1, ignore_index=True)

        self.data6_mean.insert(0, 'groupe', self.data['groupe'].unique().tolist())

        self.data6_mean.columns = ['groupe', 'Gmax', 't50', 'AUC']

        self.model_germination_groupe = DataFrameModel(self.data6_mean)
        self.tableView_page4.setModel(self.model_germination_groupe)
        self.tableView_page4.resizeColumnsToContents()


    # méthode pour export des tableaux de paramètres de germination individuels ou groupés

    def export_param_germination(self):

        self.modele_tableView_page4 = self.tableView_page4.model()

        if self.modele_tableView_page4 is self.model_germination_ind:
            self.data6.to_csv("tableau_parametres_germination_ind.csv", sep=";", decimal=".", index=False)

        else:
            self.data6_mean.to_csv("tableau_parametres_germination_groupe.csv", sep=";", decimal=".", index=False)

    # méthode pour afficher les boxplots des paramètres de germination en fonction du paramètre choisi dans le comboBox (liste déroulante)


    def boxplot_germination(self):

        # important : pour éviter la contamination sur le 1er graphe généré, par des données précédentes
        # qui trainent, on commence dans la méthode de création de graphes par un plt.clf() pour nettoyer
        # le contenu matplotlib !!!

        plt.clf()

        sns.set_theme(style="whitegrid")

        self.data7 = pd.concat([self.data6, self.data['groupe']])

        self.titre_boxplot_germination = self.textEdit_page5.toPlainText()

        if self.comboBox_page5.currentText() == "Gmax":


            boxplot = sns.boxplot(x='groupe', y='Gmax', data=self.data7,palette="Set1",linewidth=1,saturation = 2)
            plt.title(self.titre_boxplot_germination)
            plt.ylabel(self.comboBox_page5.currentText())
            plt.show()
            plt.figure()
            boxplot.get_figure().savefig("boxplot_Gmax.tiff")

            self.image_boxplot_Gmax = QPixmap("boxplot_Gmax.tiff")
            self.image_image_Gmax_2 = self.image_boxplot_Gmax.scaled(471, 431, Qt.KeepAspectRatio,
                                                                     transformMode=QtCore.Qt.SmoothTransformation)
            self.label_page5.setPixmap(self.image_image_Gmax_2)


        elif self.comboBox_page5.currentText() == "t50":


            boxplot = sns.boxplot(x='groupe', y='t50', data=self.data7,palette="Set1", linewidth=1, saturation = 2)

            plt.title(self.titre_boxplot_germination)
            plt.ylabel(self.comboBox_page5.currentText())
            plt.show()
            plt.figure()
            boxplot.get_figure().savefig("boxplot_t50.tiff")

            self.image_boxplot_t50 = QPixmap("boxplot_t50.tiff")
            self.image_image_t50_2 = self.image_boxplot_t50.scaled(471, 431, Qt.KeepAspectRatio,
                                                                   transformMode=QtCore.Qt.SmoothTransformation)
            self.label_page5.setPixmap(self.image_image_t50_2)
        else :


            boxplot = sns.boxplot(x='groupe', y='AUC', data=self.data7,palette="Set1", linewidth=1, saturation = 2)
            plt.title(self.titre_boxplot_germination)
            plt.ylabel(self.comboBox_page5.currentText())
            plt.show()
            plt.figure()
            boxplot.get_figure().savefig("boxplot_AUC.tiff")

            self.image_boxplot_AUC = QPixmap("boxplot_AUC.tiff")
            self.image_image_AUC_2 = self.image_boxplot_AUC.scaled(471, 431, Qt.KeepAspectRatio,
                                                                   transformMode=QtCore.Qt.SmoothTransformation)
            self.label_page5.setPixmap(self.image_image_AUC_2)


    def anova(self):

        self.data8=self.data7.drop(labels='echantillon', axis=1)

        aov = pg.anova(data=self.data8, dv='Gmax', between='groupe', detailed=True).round(6)
        self.aov_res_Gmax = pd.DataFrame(aov.T).transpose()
        self.model_anova_Gmax = DataFrameModel(self.aov_res_Gmax)

        aov = pg.anova(data=self.data8, dv='t50', between='groupe', detailed=True).round(6)
        self.aov_res_t50 = pd.DataFrame(aov.T).transpose()
        self.model_anova_t50 = DataFrameModel(self.aov_res_t50)

        aov = pg.anova(data=self.data8, dv='AUC', between='groupe', detailed=True).round(6)
        self.aov_res_AUC = pd.DataFrame(aov.T).transpose()
        self.model_anova_AUC = DataFrameModel(self.aov_res_AUC)

        posthoc = pg.pairwise_ttests(data=self.data8, dv='Gmax', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_Gmax = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_Gmax = DataFrameModel(self.posthoc_res_Gmax)

        posthoc = pg.pairwise_ttests(data=self.data8, dv='t50', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_t50 = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_t50 = DataFrameModel(self.posthoc_res_t50)
        self.tableView_page6.setModel(self.model_multcomp_t50)
        self.tableView_page6.resizeColumnsToContents()

        posthoc = pg.pairwise_ttests(data=self.data8, dv='AUC', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_AUC = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_AUC = DataFrameModel(self.posthoc_res_AUC)






        if self.comboBox_page6.currentText() == "Gmax":

            aov = pg.anova(data=self.data8, dv='Gmax', between='groupe', detailed=True).round(6)
            self.aov_res_Gmax = pd.DataFrame(aov.T).transpose()
            self.model_anova_Gmax = DataFrameModel(self.aov_res_Gmax)
            self.tableView_page6.setModel(self.model_anova_Gmax)
            self.tableView_page6.resizeColumnsToContents()

        elif self.comboBox_page6.currentText() == "t50":

            aov = pg.anova(data=self.data8, dv='t50', between='groupe', detailed=True).round(6)
            self.aov_res_t50 = pd.DataFrame(aov.T).transpose()
            self.model_anova_t50 = DataFrameModel(self.aov_res_t50)
            self.tableView_page6.setModel(self.model_anova_t50)
            self.tableView_page6.resizeColumnsToContents()

        else:

            aov = pg.anova(data=self.data8, dv='AUC', between='groupe', detailed=True).round(6)
            self.aov_res_AUC = pd.DataFrame(aov.T).transpose()
            self.model_anova_AUC = DataFrameModel(self.aov_res_AUC)
            self.tableView_page6.setModel(self.model_anova_AUC)
            self.tableView_page6.resizeColumnsToContents()

    def multcomp(self):

        self.data8 = self.data7.drop(labels="echantillon",axis=1)

        aov = pg.anova(data=self.data8, dv='Gmax', between='groupe', detailed=True).round(6)
        self.aov_res_Gmax = pd.DataFrame(aov.T).transpose()
        self.model_anova_Gmax = DataFrameModel(self.aov_res_Gmax)

        aov = pg.anova(data=self.data8, dv='t50', between='groupe', detailed=True).round(6)
        self.aov_res_t50 = pd.DataFrame(aov.T).transpose()
        self.model_anova_t50 = DataFrameModel(self.aov_res_t50)

        aov = pg.anova(data=self.data8, dv='AUC', between='groupe', detailed=True).round(6)
        self.aov_res_AUC = pd.DataFrame(aov.T).transpose()
        self.model_anova_AUC = DataFrameModel(self.aov_res_AUC)

        posthoc = pg.pairwise_ttests(data=self.data8, dv='Gmax', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_Gmax = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_Gmax = DataFrameModel(self.posthoc_res_Gmax)

        posthoc = pg.pairwise_ttests(data=self.data8, dv='t50', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_t50 = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_t50 = DataFrameModel(self.posthoc_res_t50)
        self.tableView_page6.setModel(self.model_multcomp_t50)
        self.tableView_page6.resizeColumnsToContents()

        posthoc = pg.pairwise_ttests(data=self.data8, dv='AUC', between='groupe', parametric=True, padjust='fdr_bh',
                                     effsize='hedges').round(6)
        self.posthoc_res_AUC = pd.DataFrame(posthoc.T).transpose()
        self.model_multcomp_AUC = DataFrameModel(self.posthoc_res_AUC)

        if self.comboBox_page6.currentText() == "Gmax":

            posthoc = pg.pairwise_ttests(data=self.data8, dv='Gmax', between='groupe', parametric=True, padjust='fdr_bh',effsize='hedges').round(6)
            self.posthoc_res_Gmax = pd.DataFrame(posthoc.T).transpose()
            self.model_multcomp_Gmax = DataFrameModel(self.posthoc_res_Gmax)
            self.tableView_page6.setModel(self.model_multcomp_Gmax)
            self.tableView_page6.resizeColumnsToContents()

        elif self.comboBox_page6.currentText() == "t50":

            posthoc = pg.pairwise_ttests(data=self.data8, dv='t50', between='groupe', parametric=True, padjust='fdr_bh',effsize='hedges').round(6)
            self.posthoc_res_t50 = pd.DataFrame(posthoc.T).transpose()
            self.model_multcomp_t50 = DataFrameModel(self.posthoc_res_t50)
            self.tableView_page6.setModel(self.model_multcomp_t50)
            self.tableView_page6.resizeColumnsToContents()

        else:

            posthoc = pg.pairwise_ttests(data=self.data8, dv='AUC', between='groupe', parametric=True, padjust='fdr_bh',effsize='hedges').round(6)
            self.posthoc_res_AUC = pd.DataFrame(posthoc.T).transpose()
            self.model_multcomp_AUC = DataFrameModel(self.posthoc_res_AUC)
            self.tableView_page6.setModel(self.model_multcomp_AUC)
            self.tableView_page6.resizeColumnsToContents()

    def export_tableau_stat(self):


        if self.tableView_page6.model() is self.model_anova_Gmax :
            self.aov_res_Gmax.to_csv("tableau_anova_Gmax.csv", sep=";", decimal=".", index=False)


        elif self.tableView_page6.model() is self.model_anova_t50:
            self.aov_res_t50.to_csv("tableau_anova_t50.csv", sep=";", decimal=".", index=False)


        elif self.tableView_page6.model() is self.model_anova_AUC:
            self.aov_res_AUC.to_csv("tableau_anova_AUC.csv", sep=";", decimal=".", index=False)


        elif self.tableView_page6.model() is self.model_multcomp_Gmax:
            self.posthoc_res_Gmax.to_csv("tableau_multcomp_Gmax.csv", sep=";", decimal=".", index=False)



        elif self.tableView_page6.model() is self.model_multcomp_t50:
            self.posthoc_res_t50.to_csv("tableau_multcomp_t50.csv", sep=";", decimal=".", index=False)


        else:
            self.posthoc_res_AUC.to_csv("tableau_multcomp_AUC.csv", sep=";", decimal=".", index=False)


# bloc d'exécution

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)

    # PyQt5 style dispo = ['Breeze', 'Oxygen', 'QtCurve', 'Windows', 'Fusion']
    # "Plastique", "Cleanlooks", "CDE", "Motif", "GTK+"
    app.setStyle('Fusion')

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


